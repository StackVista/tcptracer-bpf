// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x79\x70\x1c\x57\x5e\xc7\xbf\x3d\x3d\x3d\x6a\x69\xa4\xd1\xc8\xba\x46\x3e\x5b\xb6\x1c\x3b\xde\x68\x74\x58\x2b\x6b\x65\xd6\xd7\xc6\x87\xd6\x72\xac\x78\xed\xb5\xd7\xbb\xcb\xb8\x35\x6a\x49\x83\xe6\x62\xba\x65\x4b\x71\x6a\x63\x02\x54\x0e\xa7\x0a\x93\x83\x0a\xa4\x42\x1c\x93\x2a\x5c\x24\x50\x40\x48\xe2\x54\x05\x94\x98\x1c\x84\x24\x90\x90\x84\x98\xaa\x14\x18\xa8\x0a\xa1\x02\x94\x03\x54\x48\x71\x44\xd4\xaf\xfb\xf5\xf4\x9b\xe7\x79\x16\xd7\x9f\x74\x95\xfa\xbd\xcf\xf7\x1d\xbf\x77\xfc\xba\xfb\xd7\x3d\xba\x6b\xf7\xe8\x9e\x90\xa2\xc0\x3f\x14\xfc\x0b\x02\x0a\x0e\xfd\xa6\x20\xbf\x83\x9d\x3b\xa0\x60\x61\x83\xa7\x2d\xb4\xb1\xd4\xf6\xd2\x1a\x15\x08\x01\x18\xeb\x65\xba\xce\xd2\x79\x56\x5e\x0b\xd7\xce\xd8\x39\xa6\xd7\x7a\xe9\x58\xd1\x4b\xa7\x6a\x01\x6a\x72\x90\xe9\x53\x3a\x10\x27\xbe\x8f\xb5\xaf\x01\x54\xbe\x3e\x80\x04\x57\x7f\x81\xf5\xfb\x08\x2a\xc7\x67\x4e\x7b\x03\x5a\xb8\x9b\xf5\x13\x02\xa8\xc9\x98\xe1\x71\xba\xee\xcb\x45\xb7\xfc\x9e\xc0\x4e\x8c\xb3\xb3\x50\xc3\xd2\xfb\x82\x79\xd4\x73\xf3\x38\x5d\x77\x65\x51\x2c\x6f\xa8\x32\x4f\x7f\x7e\xf3\x4f\x7a\xf5\x0f\x76\x30\xbd\x86\xcd\x93\xad\x13\x3f\x8e\xc6\x1b\xcc\x37\xfd\x4b\xd7\xae\x1b\xf7\xb2\x25\xc6\x1d\x5f\x62\xdc\x4d\xff\x47\xe3\x6e\xbe\xe1\xb8\xff\xd9\xed\xa7\x46\x07\x5a\xc8\xab\xce\xb0\xf6\xcc\x09\x4f\x29\x5e\xbf\x33\xcb\xbf\x72\xeb\xcd\xd4\xfd\xbb\x37\xce\x0b\xc1\xfe\x5d\x5b\x5c\x5c\x4c\x08\x4e\xfb\xb3\xf0\xfc\xab\x15\x9e\xe3\x99\xa6\xa7\xcf\x87\x3c\x6e\xec\x64\xf3\x8e\x7b\x3c\xcf\xda\xd7\x28\x5e\xbb\xd3\x71\x8f\x35\x77\x77\x81\x17\x7c\x7d\xf9\xd5\x45\xbe\xbf\xd3\xcb\x3f\xad\x3a\x9e\x85\x5f\x61\xac\x02\x57\xab\x8c\xef\x85\x70\x30\xce\x10\x5b\x93\xc5\xc5\xc5\x45\xbf\xdc\xf7\x5b\x6a\x16\x67\x7f\x6e\xc5\xff\x3f\xdc\x63\xef\xd8\x28\xd2\x59\x33\x3f\x65\x9c\xb4\x4a\x76\xa6\x90\x37\x06\x93\xbd\xc9\x3e\x63\xa3\x63\x4e\xd9\x3d\x87\x76\x8f\xee\xde\xf9\x9d\xdd\xa9\xc1\xde\xbe\x9e\xc9\x4c\xde\xcc\xde\x0c\x27\x5d\x74\x4a\x66\xda\x2a\x75\x8f\x17\x27\x93\x69\xf4\xd8\xa5\x34\xec\x42\x7a\xc6\x72\x52\xb6\x63\x3a\x36\x9c\xf9\xa2\x85\xd9\xbc\x9d\x99\xca\x5b\x13\x46\x26\xef\x60\xc6\x9a\x4f\xd9\x99\x3b\x2c\x9c\x34\xb3\xb3\x96\x97\xcd\x99\x73\x29\x2b\xef\x94\x32\x96\x8d\x9c\x59\x4c\x4d\x66\xcd\x29\x1b\xc5\x4c\x3e\x9f\xc9\x4f\x21\x6f\xe6\x2c\xbb\x68\xa6\x2d\xa4\xa7\xcd\x12\xa8\x85\xdb\xed\x78\x71\x32\x45\xb5\x27\xac\x49\xa4\xb2\x99\xb4\x95\xb7\x03\x31\x5b\x28\xcc\xcc\x16\x53\x56\xd6\xca\x95\xb5\xd9\xe2\x84\xe9\x58\x9e\x46\x43\xc9\x16\xf2\x53\x86\x7b\xaa\x18\x61\xd1\x2c\xd9\x56\x2a\x53\x3c\x39\x80\x54\x6a\x76\x73\x3f\xec\x99\x71\x64\xad\x3c\x8a\x33\x4e\xca\xb5\x9c\x33\x4b\x33\xf8\xc9\x59\x6b\xd6\xa2\x7e\x8b\x34\xc8\x62\xa9\xe0\x14\xd2\x85\x2c\x4e\x66\xcd\x7c\xaa\x58\xb2\x6c\x2b\xef\x78\xe0\xa4\x33\xbe\x5a\x70\x0a\x28\x96\x32\x85\x52\xc6\x99\x47\x26\x3f\x55\xb2\x6c\x3b\x95\x99\xcc\xe4\x27\xac\x39\xf8\xa9\x93\x4e\x79\x99\xf4\x38\xa6\x4d\x7b\x9a\x84\x74\xd6\xb4\xed\xcc\x04\x26\x4c\xc7\x74\x4f\x29\x2b\x3f\x81\xbc\x59\xcc\xa4\x32\x13\x98\x34\x73\x99\xec\x3c\x4a\x56\xae\xe0\xd0\xc8\x07\x90\x2d\xa4\xcd\xac\x9b\x2b\x8b\x83\x65\x71\xd0\x17\x8b\x85\x92\xc3\x54\x37\xeb\x76\x9c\xb3\x1c\x13\xa9\x94\x3d\x93\x1a\x9f\x9d\x9c\x44\x61\x72\x92\x96\x61\x70\x00\xa7\x7a\x71\xaa\x0f\xa7\xfa\x71\x6a\xb3\xbf\xc9\x29\x6f\xfb\x69\x2f\x69\x75\x6c\x50\xbd\xf1\x79\xc7\xb2\x31\x6a\x99\x93\xc8\x4f\x53\xf3\x4c\x91\x4d\x7d\xc6\x9a\x87\x5d\x4a\xa7\x32\x45\xd0\xba\x4e\xd8\x0e\x65\x49\x71\xcd\x97\x77\xc1\x9e\x76\x47\x63\x3b\x9e\xbe\xdf\x9a\x47\xd1\x06\xe5\xbd\x73\xdf\x20\x0d\xa9\x6f\x10\x59\x32\xe2\x1f\xec\xee\x02\x05\xb7\xfb\xd9\x8b\x65\xe9\xbb\x32\xa7\x0f\x5a\x1d\xf2\xb3\x67\xca\xd2\x51\x59\x2b\x3d\xb0\xe5\x67\x2f\x85\x96\xb4\xb5\x31\x68\xd5\xeb\x6b\xff\xad\x56\x9f\x2e\xdd\xea\x04\x4b\xe7\xca\xad\xbe\x27\x56\xf1\xef\x9b\xbd\x8a\xb4\xca\x97\xac\xe8\x7c\xd9\xd0\x98\x58\x45\x69\x52\xd6\xc7\x9a\x35\x35\x16\x6f\x5f\x11\xfb\x9d\x5d\x1d\x4d\xca\x91\x76\x20\x34\x00\x35\x36\xd2\xbc\xbd\x63\x38\xba\x35\x1a\x4a\x00\x6a\xb3\xa2\xc6\xa2\x1a\x21\x10\x6e\x70\x4b\x09\x86\xa2\x80\xd6\x05\x35\xb6\x2d\x1a\x8d\x02\x11\x45\x19\x69\x06\x6a\x3a\x31\xd2\xbc\x45\x03\x74\x2a\x8a\x46\xb7\x45\x81\x5a\x57\x8b\x02\x75\x03\xe5\xd6\x40\xb4\x11\xd4\xa0\xbe\x55\x19\x69\xde\xd0\x01\x34\x68\x2e\xc7\xe8\x81\xde\x98\x54\x9a\x94\x65\x91\x1d\x89\xbe\x66\x20\xae\x21\xd4\x4e\x99\xa6\x01\x50\xb2\x2c\xa9\xa8\x31\xea\x63\x43\x07\x8d\xd3\x88\x02\xcd\x1a\x3c\x89\x7a\x68\x19\xe0\xa0\xb5\x0d\x23\xcd\x1e\x02\x6d\xee\x54\xa2\xc3\xd1\xad\x1a\xd0\x5e\x9e\x8a\x46\x53\x49\xf8\x26\xf9\xbe\x81\x0e\x32\x1e\x74\xb7\x7c\xa0\x02\x57\xac\x52\xfa\x9a\x8f\xb4\x1f\x8b\x7e\x2f\x0a\xac\x8c\xba\x3d\x00\xab\xca\x66\xa2\xc0\xea\x76\x0e\xf0\x46\x18\xf0\x1e\x72\xba\xbb\x41\xf5\x55\x1d\xe6\x84\xef\x20\xdb\x29\xd3\x5d\xab\xfa\x05\xaa\xb7\xfb\xca\x5e\xb7\x8f\xc7\x69\x13\xf7\x21\xc8\x8f\x84\x83\xfc\xb7\xf5\x20\xbf\xbf\x3e\xc8\x8f\xc6\x83\xfc\x81\x16\x37\xff\x14\xe5\x6f\x4b\x40\x23\xa8\x09\x47\x7e\x8b\x92\x4b\x9e\xd7\xb8\x5a\x44\x71\xaf\x11\xbd\xc6\x1d\xd4\x07\x34\x28\x33\x18\x94\x5b\xbf\x96\xea\x87\x51\x47\xc2\x67\xae\x73\x45\xaf\xb9\xf3\x53\x28\xd4\xf3\x4f\x88\xb9\x15\xea\x29\x6e\x68\x8e\x36\x29\x40\xfd\xd7\x2a\x2a\x78\xa7\x7e\xc5\x0d\x32\xe8\x14\xf6\x06\xa5\x37\xfa\xd6\xe8\x8e\xa0\x1c\xb7\x59\x04\x84\xbb\x28\x33\x08\xe0\x7e\x05\x68\x7a\x84\x4e\xe7\xe9\xf4\x34\x9d\x9e\xa7\x7e\x28\xe0\x43\x68\xcd\x65\xd7\xa6\x97\x7f\x47\xf1\xe2\x2f\x84\xd6\xec\x51\xbd\x10\x0b\x21\x83\x6a\x78\xd9\xce\x20\xbb\x36\xc8\xae\xbb\xec\xc6\x4e\x8f\xfb\x7b\xb1\x22\xfa\x27\x0a\xe0\x86\xd0\xe7\xc2\xbf\xa7\xb7\x53\x86\xaa\x84\x17\x74\x04\xf0\xb2\x1e\x0e\xe0\x15\x9d\xab\x76\x59\xaf\x0f\xe0\xf7\xf5\x78\x00\xaf\xea\x2d\x01\xbc\xa6\x27\x02\x78\x5d\x5f\x19\xc0\x1b\xba\x11\xc0\x1f\xe8\x5d\x01\xbc\xa9\x6f\x0c\xe0\x0f\xf5\x5b\x5c\x48\xaa\x40\xf8\x2d\xbd\x37\x28\x79\x5b\xbf\x35\x80\x77\xf4\x7d\x01\xfc\x91\x3e\x1a\xc0\x1f\xeb\x63\x01\xbc\xab\x1f\x0e\xe0\x7d\xfd\x58\x00\x1f\xe8\x3f\x08\xe0\x43\xfd\x84\x0b\xc3\x64\xf4\x4f\xf5\x89\x00\x3e\xd2\x9d\xa0\xda\x15\xfd\x67\x02\xf8\x33\xfd\xde\x00\x3e\xd6\x1f\x40\x84\x72\xae\x67\x69\x5c\x3e\x8c\xd6\x7e\x76\x77\x53\xd7\x24\x7c\xbf\xa0\xbb\xb7\x72\xdc\xdd\xa8\x21\xf2\xa9\x8e\x2c\x2b\x08\x0d\xd1\x76\x2f\x3f\xcc\x9a\x84\x0e\xd6\x85\xfd\x1d\x1d\x0e\x36\x97\xcb\x6e\xdb\x5a\xae\x30\xf2\x60\x18\x58\x61\xfb\x4d\x77\xc7\x2f\xf8\x2e\x17\x53\x3c\x97\xf3\x4a\xe9\x61\x10\xda\x13\xbf\xe2\x97\xf6\xf9\xa5\x2b\x77\x84\x82\x4b\xda\xeb\xf3\x58\xa3\x7b\xd1\x45\x29\x59\x45\xb9\xb8\xb6\xdb\x55\x7a\xc3\x80\xb6\x07\x41\x7e\xaf\x1e\xcc\x54\xdb\xca\xea\x7e\xd3\x2d\x3f\x43\xe5\xdb\x10\xe4\xb7\x87\x83\xfc\x0e\xef\xd2\x3f\x4b\xf9\x9d\xf5\x41\x7e\x57\x2c\xf0\x5e\x6d\xd8\xbb\xb0\x42\xab\x29\x09\x87\x36\x86\xfd\x95\x0f\xdd\xec\x75\xfb\x6c\x18\x08\x6d\x02\x22\x0b\x61\xb6\xf0\x21\xb4\x9e\x65\x11\xba\x9a\x80\xff\x00\xf4\x9f\x2b\xfe\x73\xeb\x2a\xaa\x1f\xfe\xa3\x4f\x67\x33\xf2\x1f\x62\x8f\x56\x7b\xb3\xe6\x8e\x8b\x02\x5f\x92\x05\xfc\x3f\x2a\x3f\x56\xdf\x0a\x7b\xc3\xa8\x16\x4b\x2e\x00\x41\xb0\xb9\x09\xa8\x0c\x77\x6f\x57\x21\x86\x46\x8a\x82\xaa\x01\x28\xed\x3b\x17\x69\xd2\xf1\x5a\xc5\x08\x68\xdd\xbc\x28\x87\xee\x13\x41\x40\xb6\x9d\x1b\x19\x85\xbe\xb4\x25\x15\xf1\x2b\xed\xb9\x24\xb4\x25\xd7\xa4\x68\x8a\x3c\x9c\x98\xf6\x43\x88\xba\x2e\xbb\xc6\x28\x3c\x23\x0f\x73\xa3\x38\xf2\x0a\x12\xc8\x9b\xbd\x20\x8c\x6e\x7b\x5e\x50\x48\x37\x6f\x37\x2c\x27\x97\x23\x81\x3b\xca\xa1\xd5\x1d\x87\xa0\xdf\x19\x55\xea\xd9\x3b\x59\x42\xb2\x3d\x2b\x01\x0c\xdc\x60\xab\xe8\xf9\x11\xc6\x5f\xb9\x4e\xa0\xfc\x5b\xac\x01\x8a\xe2\x7e\x65\xa1\x5b\x73\x12\x3d\xb3\x76\x89\x5e\x40\x7a\x66\xac\x52\xde\xca\xda\x3d\x03\xc9\xbe\xa1\x64\x5f\x6f\x77\x7f\x6f\x6f\x72\x32\xdd\x3f\x94\x9c\x1b\x1a\x4c\x0d\x0e\xf4\x64\xf2\xe9\xec\xec\x84\xd5\x33\x6b\x16\x33\x3d\xa6\x9d\xeb\x9e\xb2\xf2\x56\x29\x93\xfe\x1f\xf6\x90\xcd\xe4\x67\xe7\xbc\x2d\x99\xb6\xb2\x45\xab\x64\x27\xa7\x69\x48\xe2\xcb\x11\xdc\x25\xef\xce\x66\x07\x07\x92\xd3\xb4\xcf\x24\x4f\xd3\x33\xb9\xb2\xa6\xdb\x18\xe1\x10\x6a\xcb\xd3\x57\x57\x2b\x9a\x51\xd7\xa7\x35\x44\x92\x9a\x11\xe9\xa6\x34\xd2\xad\xb5\xae\xd7\x1a\x23\x86\xd6\x69\x68\x2b\x0c\xcd\x88\xac\xd6\x1a\x22\x86\x96\x8c\xac\xd5\x36\x46\x0c\x4d\x33\x42\x21\x28\x4a\x65\x37\x5b\x14\x6d\x65\x9d\x5a\x6b\x68\x6b\x23\x86\xd6\x90\xd4\x96\x45\x3a\x35\x43\x3d\x61\xb8\x1d\x6f\x8c\xa8\xeb\x92\x5a\x83\xfa\xfd\xa4\x66\xf4\xb8\x4a\x6b\xa4\xdf\xb3\x90\x0c\x2c\x24\xcb\x16\xe2\x11\xd5\x30\x34\x43\xfd\x61\xb9\x79\x17\x35\x3f\xfe\x5f\x6f\xde\x69\x68\xeb\xbb\xb4\x78\xc4\xd0\x62\x86\xb6\x2c\xd2\xbb\x46\xbb\x49\xcd\x25\xb5\xa8\x9a\x30\xb4\xda\x6d\x5a\xfb\x3a\xad\x79\xcd\xbc\xd6\xd6\xa3\xb5\x44\x0c\xad\x39\xd2\x4d\xa2\x76\x20\xa4\x42\xb9\xf1\x35\xdf\xe6\x16\xd7\x48\xf5\x6e\x89\xfe\x4d\x89\xbe\x4b\xa2\x1f\x94\xe8\x87\x25\xba\x29\xd1\x7f\x42\xa2\xcf\x4a\xf4\x9f\x92\xe8\x67\x25\xfa\x43\x12\xfd\x71\x89\x7e\x41\xa2\x3f\x2d\xd1\x5f\x90\xe8\x2f\x4b\xf4\x0f\x24\xfa\xa7\x12\xfd\xef\x24\xba\xaa\x54\xd7\x63\x12\xbd\x45\xa2\x8b\xdf\x91\x7c\x7d\xa5\x44\x5f\x2f\xd1\x37\x49\xf4\x21\x89\xbe\x53\xa2\xdf\x26\xd1\x8f\x4a\xf4\x71\x89\x3e\x23\xd1\x4f\x4b\xf4\x9f\x96\xe8\x0f\x48\xf4\x9f\x93\xe8\x0f\x4b\xf4\x27\x24\xfa\x53\x12\xfd\xd7\x25\xfa\x73\x12\xfd\x25\x89\xfe\x86\x44\x7f\x4f\xa2\x7f\x2c\xd1\x3f\x91\xe8\xff\x28\xd1\xff\x43\xa2\xd7\x84\xaa\xeb\x4d\x12\xbd\x55\xa2\xaf\x90\xe8\xab\x25\x7a\xa7\x44\xef\x92\xe8\x1b\x24\xfa\xa0\x44\x1f\x96\xe8\xdb\x25\xfa\xb7\x24\xfa\x88\x44\xbf\x4d\xa2\x1f\x96\xe8\x3f\x94\xe8\xa6\x44\x9f\x96\xe8\x59\x89\x6e\x4b\xf4\x3b\x25\xfa\x59\x89\xfe\xb0\x44\x7f\x54\xa2\x3f\x26\xd1\x9f\x94\xe8\x17\x25\xfa\x6f\x08\x7a\xdc\xd5\x55\xec\x10\xf4\x5a\xa6\x9f\xaf\x12\x3a\xab\x92\x0f\xe8\x2a\x54\x89\xae\x4b\xf4\x3a\x89\x1e\x95\xe8\x0d\x12\xbd\xed\x3a\xed\x92\x1b\x8b\x46\xae\xd3\xbf\x72\xf5\xeb\xc7\x7f\xbf\xab\x5f\x3f\xfe\x56\x57\xd7\xae\xd3\xaf\x96\xbf\xa3\x01\xf4\x0a\x79\x26\x54\xc9\xfe\xa1\xb0\xd7\x1d\x5d\xe0\x66\x81\x57\x08\x3c\x28\xf0\x36\x81\x47\x04\xbe\x5d\xe0\x2c\xc7\x54\xe6\x08\x7c\x97\xc0\xf7\x08\x7c\x41\xe0\x5f\x13\xf8\x39\x81\x7f\x57\xe0\x2b\x02\x5f\x15\xf8\x33\x81\xff\x49\xe0\x98\x52\xc9\x6d\x02\xf7\x09\xfc\x0d\x81\x0f\x0b\xfc\x03\x81\x7d\xcf\x20\x0f\xfc\x0e\xf7\x55\xad\x8e\xd5\x59\xc6\x31\x6d\x6d\x1b\xc7\xdf\x05\xb0\x9c\x63\xf2\x9a\x9b\x38\x3e\x02\xe0\x6b\x1c\xd3\x0b\xf0\x16\x6e\x7e\xc7\xcb\xbf\xfd\x7a\xe5\x8d\xdc\x7e\xd6\xb1\xcf\x58\x47\x38\xa6\xa8\xd6\xe4\x98\x7c\x29\xc7\x71\x2d\x80\x79\x8e\xeb\xd8\xef\x61\x3e\xd3\xd5\xf4\xf3\x1c\xd3\x5c\x7f\x99\x63\x5a\x8b\xdf\xe6\x98\xae\xb2\x17\x39\x8e\x01\xe5\xb8\xae\x8e\xbd\xe3\xbd\xcd\xcd\xe7\x28\x80\xbf\xe4\xca\x9b\x68\xcd\x94\x80\x69\x2d\x6f\xe1\x98\x7c\x7f\x33\xc7\x2d\x00\x86\xb9\xfd\x21\xff\x3d\xc0\x95\x1f\xa2\x35\x17\xd8\xe1\x98\xae\xd1\x33\x1c\xb7\x03\x38\xcb\xf1\x66\x00\xbf\xc0\xf1\xd7\x01\x3c\xc9\x31\x5d\x6b\xcf\x70\xbc\x85\xfd\x4e\xe9\xf3\x10\x50\x8e\x27\xea\x98\x2f\xbc\xcf\x71\x3f\x50\x8e\x1f\xea\xd8\xbb\xee\xdf\x72\xdc\x01\xe0\x0b\x8e\xc9\x77\xd4\x50\xc0\x74\xed\xc7\x39\xa6\x77\xe2\x55\x1c\xaf\x02\xb0\x89\xe3\xd5\x34\x46\x8e\xd7\x00\xb8\x95\x63\x83\x7c\x9c\xe3\x4e\x00\x3f\xce\xf1\x5a\x00\x33\x1c\xaf\x03\x30\xc7\x71\x17\xf9\x0f\xc7\xeb\x01\x3c\xc8\x31\xf9\xfa\x13\x1c\x6f\xa0\xf5\xe3\x78\x23\xf9\x0f\xc7\x37\x03\x78\x9d\xe3\x4d\xb4\x7e\x1c\xd3\xb5\x72\x95\xe3\x5b\x00\xfc\x3d\xc7\xf4\xee\xf6\xaf\x1c\x27\xd9\xef\xc1\x3e\xf7\x90\x0f\x71\xdc\x4b\x73\xe6\xb8\x0f\xc0\x7e\x8e\x07\xc8\x87\xd4\xc0\xdf\xe8\x7e\x70\x82\x2b\xff\x06\xad\x8f\x5a\xe9\x6f\x05\xb5\xd2\xbf\xee\x10\xca\x7f\xc4\xf1\x30\x80\xfb\x38\xde\x0e\xe0\x61\x8e\xe9\xda\x7f\x82\xe3\x9d\x74\x7f\xe5\x98\xee\x05\x2f\x72\x4c\xf7\x82\x97\x05\x7b\x6f\x0a\xfc\x91\x50\xff\xcf\x85\xf2\xbf\x11\xf8\x73\x61\xfe\x5f\x71\xe5\x07\xc8\x1f\xc3\x01\xd3\xb3\x27\xc1\xf1\x56\xf2\x11\x8e\xe9\x1d\xfa\xeb\x1c\xff\x18\xfd\x71\xbc\x8f\xfc\x93\x63\x7a\xb7\x1e\xe3\xf8\x56\xba\x3f\x73\x4c\xfe\x3f\xcd\xf1\x6e\xba\xde\x39\xde\x4b\xfe\xc9\xf1\xb7\x00\x3c\xc0\xf1\x1e\x00\x0f\x71\xfc\x6d\x00\x8f\x09\xfc\xab\x1c\xef\x07\xf0\x2a\xc7\xa3\x08\x0e\x7f\x7d\x74\x81\xe3\x02\x27\x04\xee\x15\x78\x48\xe0\x1d\x02\xef\x13\xf8\x04\xc7\x74\x3f\x9c\x16\xb8\x28\xd4\x9f\x13\x98\x7f\xbe\x1d\xae\xc2\x2b\x85\xfe\xc4\xf1\x7d\x2e\x96\x0b\xcf\x4f\x24\x27\xac\xf1\xd9\xa9\x94\x39\x3e\x5e\xb2\x4e\x22\xe9\x58\x73\x4e\xe5\x77\xd1\x9c\x59\xb4\x7b\xd2\x85\x7c\xde\x4a\x3b\x99\x42\xde\x46\xb2\x64\x65\x59\xab\xe2\xec\xb8\x33\x5f\xb4\x44\xcd\xfd\xd5\x9f\xd7\x4a\x66\x7e\x8a\x14\x8f\x6c\xa7\xe4\x16\x32\x33\xec\x63\xab\xf0\xed\x95\xd5\xcd\x99\xe9\x4c\x7e\xb2\xc0\x77\xe6\x72\xf9\x3b\x2e\x57\x90\xcd\xe4\x19\x5b\xd3\xa9\xc9\x92\x99\xab\x2c\x2d\xa4\x91\xb4\x9d\x92\x63\x8e\x23\x69\xcf\xe7\x28\xe5\x3e\xe2\x8e\xee\xda\xd5\x97\xda\xec\x25\xfd\xf8\x5f\x1f\xff\xe0\xff\x64\x27\x1c\xd7\xba\xbc\xb4\x5d\x78\xbf\x14\xd0\x8d\x25\x14\x6e\xbf\xfd\xc3\xf7\x37\xf1\xd3\xb8\x18\x99\xdf\x29\x69\xef\x7f\xa7\x11\xbf\xcf\x8a\xed\xe7\x58\x3c\x72\xdd\xf8\x59\x80\xcb\xfe\x3d\xcc\xbd\x5e\x54\xae\xbd\x7f\x3d\xad\x65\xf6\xc5\x35\x38\xcf\x04\xf1\xbb\x4d\x58\xa8\xf7\xa2\xa4\xfd\xa5\x70\xf5\xfa\xe2\xfa\xe5\x98\xd6\x2b\xe8\x2f\xb1\x86\xcf\x86\xaa\xb7\xf7\xd3\xbf\xae\xd2\x27\x1d\x05\xf6\x69\xf2\xd4\x12\xfb\xf7\x17\x92\xf5\x8b\xb3\x0b\xf6\x3c\x6b\x90\x60\x6b\x27\xae\x9f\x22\xb1\xff\x09\xab\xe8\x2c\x61\xff\x19\x49\xfb\xe3\xec\x55\xed\xad\xf0\x8d\xdb\x5f\x94\x8c\xff\x37\x57\x79\xa9\x11\x09\xc6\x1f\xad\x32\xfe\x94\xc4\xfe\x7a\xf6\x6b\xee\x39\xdc\xd8\xfe\xf7\x25\xf6\xdf\x5d\xe7\xa5\x7e\x1c\x9b\x60\x71\xae\x68\xff\x17\x25\xf6\x9f\x6b\xac\x6e\x4f\xe4\xfd\x92\xf6\xcf\xb3\xf6\x77\x2f\xd1\x7e\xaf\x64\xfc\xe7\xba\x2a\xc7\x99\x60\x79\x71\xfc\x5b\x24\xf6\x87\x58\x85\x37\x97\xb0\xbf\x59\x62\xff\x7c\x15\xfb\xcb\xaa\xd8\xff\x90\xf5\x29\xbe\x61\xeb\x4d\x5e\x2a\xfe\x4b\x89\x78\xff\x78\x4f\xe6\x3f\xcc\x3e\x7f\xff\x68\xa9\x62\xff\x35\xc9\xfc\x8f\x31\xfb\x51\xc9\xf5\xeb\x1f\xaf\xc8\xfc\xa7\x8a\xfd\xb6\x2a\xf6\xbf\x90\xfc\x7b\xe1\x34\x7b\xe1\xbf\x57\x0f\xec\x1e\xe5\xda\xfb\xf1\xc3\x7f\x06\x00\x00\xff\xff\xba\x98\xe3\x4c\x48\x2c\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 11336, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

