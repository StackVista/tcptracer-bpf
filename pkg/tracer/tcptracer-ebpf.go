// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x7b\x6c\x1c\xd7\x5e\xc7\xbf\xb3\xb3\xb3\x1e\xef\xda\xeb\xf5\xdb\xce\x73\x92\x38\xcd\xd3\xeb\x47\x7c\x1d\xd7\x81\x24\xcd\x4d\x9a\xf8\xc6\x4d\xdc\x34\xb9\xc9\x0d\x17\x36\xe3\xf5\xac\xbd\x78\xbd\xbb\xec\x8c\x13\xbb\xa9\x6e\xc3\x05\x74\x6f\x6f\x2a\x11\xee\x6d\x51\xa1\x2a\x4d\x43\x25\x22\x5a\x10\x50\xda\xa6\x52\xc1\x6d\xe8\x83\xd2\x16\x5a\xda\xd2\x20\x55\x10\x40\x2a\x45\x05\x94\x02\x2a\x15\x8f\x1a\xfd\x66\xce\xec\x9c\x3d\xd9\x13\xf3\xfa\xf3\x8e\xe4\x39\xe7\xf3\x3d\x8f\xdf\x79\xfc\x66\xe6\x37\xb3\xbe\x7f\xdf\xe8\x9d\x21\x45\x81\x7f\x28\xf8\x57\x04\x14\x1c\xfa\x6d\x41\x7e\x37\x3b\x77\x42\xc1\xc2\x06\x4f\x5b\x68\x63\xa9\xed\xa5\x35\x2a\x10\x02\x30\xd6\xcb\x74\x9d\xa5\xf3\xac\xbc\x16\xae\x9d\xb1\x0b\x4c\xaf\xf5\xd2\xb1\xa2\x97\x4e\xd6\x02\xd4\xe4\x30\xd3\x27\x75\x20\x41\xfc\x00\x6b\x5f\x03\xa8\x7c\x7d\x00\x1d\x5c\xfd\x05\xd6\xef\xc3\xa8\x1c\x9f\x39\xe5\x0d\x68\xe1\xdb\xac\x9f\x10\x40\x4d\xc6\x0c\x8f\xd3\xd1\x2f\x16\xdd\xf2\xef\x04\x76\xe2\x9c\x9d\x85\x1a\x96\x3e\x10\xcc\xa3\x8e\x9b\xc7\xd9\xe8\xb5\x45\xb1\xbc\xbe\xca\x3c\xfd\xf9\xcd\x3f\xe1\xd5\x3f\xdc\xc9\xf4\x1a\x36\x4f\xb6\x4e\xfc\x38\x1a\x6e\x31\xdf\xf4\x2f\xdf\xb8\x69\xdc\x4d\x4b\x8c\x3b\xb1\xc4\xb8\x1b\xff\x9f\xc6\xdd\x7c\xcb\x71\xff\x8b\xdb\x4f\x8d\x0e\xb4\x90\x57\x9d\x63\xed\x99\x13\x9e\x51\xbc\x7e\xa7\x97\x7d\xe9\xd6\x9b\x8e\xfe\x87\x37\xce\x4b\xc1\xfe\xdd\x58\x5c\x5c\xec\x10\x9c\xf6\xe7\xe0\xf9\x57\x2b\x3c\xc7\x33\x4d\x4f\x9f\x0f\x79\xdc\xb0\x86\xcd\x3b\xe1\xf1\x3c\x6b\x5f\xa3\x78\xed\xce\x26\x3c\xd6\xdc\xdd\x05\x9e\xf7\xf5\x65\xd7\x17\xf9\xfe\xce\x2e\xfb\xa4\xea\x78\x16\x7e\x95\xb1\x0a\x5c\xaf\x32\xbe\xe7\xc3\xc1\x38\x43\x6c\x4d\x16\x17\x17\x17\xfd\x72\xdf\x6f\xa9\x59\x82\xfd\xb9\x15\x7f\x78\xb8\xc7\xfe\xb1\x51\xa4\x73\x66\x7e\xd2\x38\x6d\x95\xec\x6c\x21\x6f\x0c\x26\x7b\x93\x7d\xc6\x46\xc7\x9c\xb4\x7b\x8e\xec\x1b\xdd\x77\xc7\x3d\xfb\x52\x83\xbd\x7d\x3d\x99\x6c\xde\xcc\x6d\x82\x93\x2e\x3a\x25\x33\x6d\x95\xba\xc7\x8b\x99\x64\x1a\x3d\x76\x29\x0d\xbb\x90\x9e\xb6\x9c\x94\xed\x98\x8e\x0d\x67\xbe\x68\x61\x36\x6f\x67\x27\xf3\xd6\x84\x91\xcd\x3b\x98\xb6\xe6\x53\x76\xf6\x5e\x0b\xa7\xcd\xdc\xac\xe5\x65\x67\xcc\xb9\x94\x95\x77\x4a\x59\xcb\xc6\x8c\x59\x4c\x65\x72\xe6\xa4\x8d\x62\x36\x9f\xcf\xe6\x27\x91\x37\x67\x2c\xbb\x68\xa6\x2d\xa4\xa7\xcc\x12\xa8\x85\xdb\xed\x78\x31\x93\xa2\xda\x13\x56\x06\xa9\x5c\x36\x6d\xe5\xed\x40\xcc\x15\x0a\xd3\xb3\xc5\x94\x95\xb3\x66\xca\xda\x6c\x71\xc2\x74\x2c\x4f\xa3\xa1\xe4\x0a\xf9\x49\xc3\x3d\x55\x8c\xb0\x68\x96\x6c\x2b\x95\x2d\x9e\x1e\x40\x2a\x35\xbb\xad\x1f\xf6\xf4\x38\x72\x56\x1e\xc5\x69\x27\xe5\x5a\x9e\x31\x4b\xd3\xf8\xa9\x59\x6b\xd6\xa2\x7e\x8b\x34\xc8\x62\xa9\xe0\x14\xd2\x85\x1c\x4e\xe7\xcc\x7c\xaa\x58\xb2\x6c\x2b\xef\x78\xe0\xa4\xb3\xbe\x5a\x70\x0a\x28\x96\xb2\x85\x52\xd6\x99\x47\x36\x3f\x59\xb2\x6c\x3b\x95\xcd\x64\xf3\x13\xd6\x1c\xfc\xd4\x49\xa7\xbc\x4c\x7a\x1c\x53\xa6\x3d\x45\x42\x3a\x67\xda\x76\x76\x02\x13\xa6\x63\xba\xa7\x94\x95\x9f\x40\xde\x2c\x66\x53\xd9\x09\x64\xcc\x99\x6c\x6e\x1e\x25\x6b\xa6\xe0\xd0\xc8\x07\x90\x2b\xa4\xcd\x9c\x9b\x2b\x8b\x83\x65\x71\xd0\x17\x8b\x85\x92\xc3\x54\x37\xeb\x76\x3c\x63\x39\x26\x52\x29\x7b\x3a\x35\x3e\x9b\xc9\xa0\x90\xc9\xd0\x32\x0c\x0e\xe0\x4c\x2f\xce\xf4\xe1\x4c\x3f\xce\x6c\xf3\x37\x39\xe5\x6d\x3f\xed\x25\xad\x8e\x0d\xaa\x37\x3e\xef\x58\x36\x46\x2d\x33\x83\xfc\x14\x35\xcf\x16\xd9\xd4\xa7\xad\x79\xd8\xa5\x74\x2a\x5b\x04\xad\xeb\x84\xed\x50\x96\x14\xd7\x7c\x79\x17\xec\x29\x77\x34\xb6\xe3\xe9\x07\xad\x79\x14\x6d\x50\xde\x3b\xf7\x0d\xd2\x90\xfa\x06\x91\x23\x23\xfe\xc1\xee\x2e\x50\x70\xb7\x9f\xbd\x5c\x96\xbe\x2e\x73\xfa\xa0\xd5\x11\x3f\x7b\xae\x2c\x1d\x97\xb5\xd2\x03\x5b\x7e\xf6\x4a\x68\x49\x5b\x1b\x83\x56\xbd\xbe\xf6\x3f\x6a\xf5\xc9\xd2\xad\x4e\xb1\x74\xae\xdc\xea\x1b\x62\x15\xff\xbe\xd9\xab\x48\xab\x7c\xc1\x8a\x2e\x96\x0d\x8d\x89\x55\x94\x46\x65\x7d\xbc\x59\x53\xe3\x89\xf6\xe5\xf1\xdf\xdd\xd3\xd9\xa8\x1c\x6b\x07\x42\x03\x50\xe3\x23\xcd\xbb\x3a\x87\x63\x3b\x62\xa1\x0e\x40\x6d\x56\xd4\x78\x4c\x23\x04\xc2\xf5\x6e\x29\xc1\x50\x0c\xd0\xba\xa0\xc6\x77\xc6\x62\x31\x20\xa2\x28\x23\xcd\x40\xcd\x1a\x8c\x34\x6f\xd7\x00\x9d\x8a\x62\xb1\x9d\x31\xa0\xd6\xd5\x62\x40\x74\xa0\xdc\x1a\x88\x35\x80\x1a\xd4\xb5\x2a\x23\xcd\x1b\x3a\x81\x7a\xcd\xe5\x38\x3d\xd0\x1b\x92\x4a\xa3\xd2\x14\xd9\xdd\xd1\xd7\x0c\x24\x34\x84\xda\x29\xd3\x38\x00\x4a\x9a\x92\x8a\x1a\xa7\x3e\x36\x74\xd2\x38\x8d\x18\xd0\xac\xc1\x93\xa8\x87\x96\x01\x0e\x5a\xdb\x30\xd2\xec\x21\xd0\xe6\x4e\x25\x36\x1c\xdb\xa1\x01\xed\xe5\xa9\x68\x34\x95\x0e\xdf\x24\xdf\x37\xd0\x49\xc6\x83\xee\x96\x0d\x54\xe0\xf2\x95\x4a\x5f\xf3\xb1\xf6\x13\xb1\x6f\xc4\x80\x15\x31\xb7\x07\x60\x65\xd9\x4c\x0c\x58\xd5\xce\x01\x5e\x0f\x03\xde\x43\x4e\x77\x37\xa8\xae\xaa\xc3\x9c\xf2\x1d\x64\x17\x65\x7a\x6a\x55\xbf\x40\xf5\x76\x5f\xd9\xef\xf6\xf1\x18\x6d\xe2\x01\x04\xf9\x91\x70\x90\xff\x9a\x1e\xe4\x0f\xd6\x05\xf9\xd1\x44\x90\xbf\xab\xc5\xcd\x3f\x49\xf9\x43\x1d\xd0\x08\x6a\xc2\x91\xdf\xa6\xe4\x8a\xe7\x35\xae\x16\x51\xdc\x6b\x44\xaf\x71\x07\xf5\x3e\x0d\x6a\x3a\x18\x94\x5b\xbf\x96\xea\x87\x11\x25\xe1\x53\xd7\xb9\x62\x37\xdc\xf9\x29\x14\xea\xf9\x27\xc4\xdd\x0a\x75\x14\x37\x34\xc7\x1a\x15\xa0\x6e\x4b\x45\x05\xef\xd4\xaf\xb8\x41\x06\x9d\xc2\xde\xa0\xf4\x06\xdf\x1a\xdd\x11\x94\x93\x36\x8b\x80\x70\x3f\x65\x06\x01\x7c\x4f\x01\x1a\x1f\xa6\xd3\x45\x3a\x3d\x45\xa7\xe7\xa8\x1f\x0a\xf8\x10\x32\xae\xba\x36\xbd\xfc\xdb\x8a\x17\x7f\x21\x64\xdc\xa9\x7a\x21\x16\x42\x6b\xa8\x86\x97\x5d\x1b\x64\xd7\x05\xd9\xae\xab\x6e\xec\xf4\x98\xbf\x17\xcb\x63\x7f\xaa\x00\x6e\x08\x7d\x21\xfc\xfb\x7a\x3b\x65\xa8\x4a\x78\x41\x47\x00\x2f\xe9\xe1\x00\x5e\xd6\xb9\x6a\x57\xf5\xba\x00\xfe\x40\x4f\x04\xf0\x8a\xde\x12\xc0\xab\x7a\x47\x00\xaf\xe9\x2b\x02\x78\x5d\x37\x02\xf8\x43\xbd\x2b\x80\x37\xf4\x8d\x01\xfc\x91\xbe\xd5\x85\xa4\x0a\x84\xdf\xd4\x7b\x83\x92\xb7\xf4\xbd\x01\xbc\xad\x1f\x08\xe0\x8f\xf5\xd1\x00\xfe\x44\x1f\x0b\xe0\x1d\xfd\x68\x00\xef\xe9\x27\x02\x78\x5f\xff\x66\x00\x1f\xe8\xa7\x5c\x18\x26\xa3\x7f\xa6\x4f\x04\xf0\xa1\xee\x04\xd5\xae\xe9\x3f\x1b\xc0\x9f\xeb\xdf\x0d\xe0\x23\xfd\x41\x44\x28\xe7\x7a\x96\xc6\xe5\xc3\x68\xed\x67\x77\x37\x75\x75\x87\xef\x17\x74\xf7\x56\x4e\xba\x1b\x35\x4c\x3e\xd5\x99\x63\x05\xa1\x61\xda\xee\x65\x47\x59\x93\xd0\x89\x68\xd8\xdf\xd1\xbd\xc1\xe6\x72\xd9\x03\x3b\xca\x15\x8e\x7c\x3f\x0c\x2c\xb7\xfd\xa6\x87\x12\x97\x7c\x97\x8b\x2b\x9e\xcb\x79\xa5\xf4\x30\x08\x1d\x4e\x5c\xf3\x4b\xfb\xfc\xd2\x15\xbb\x43\xc1\x25\xed\xf5\x69\x36\xb8\x17\x5d\x8c\x92\x95\x94\x4b\x68\xde\x25\xd9\x1b\x06\xb4\x46\x04\xf9\x26\x3d\x98\xa9\x16\x66\x75\x6b\xdc\xf2\x73\x54\xae\x23\xc8\xd7\x86\x83\x7c\xd4\xbb\xf4\xcf\x53\x3e\x56\x17\xe4\xeb\xe2\x81\xf7\x6a\xaa\x77\x61\x85\x56\x51\x12\x0e\x6d\x0a\xfb\x2b\x1f\xda\xec\x75\xfb\x4c\x18\x08\x6d\x01\x22\x0b\x61\xb6\xf0\x21\xb4\x9e\x67\x11\xba\xda\x01\xff\x01\xe8\x3f\x57\xfc\xe7\xd6\x75\x54\x3f\xfc\x47\x9f\xce\x66\xe4\x3f\xc4\x1e\xa9\xf6\x66\xcd\x1d\x97\x05\xbe\x22\x0b\xf8\xbf\x55\x7e\xac\xbe\x19\xf6\x86\x51\x2d\x96\x5c\x00\x82\x60\x73\x33\x50\x19\xee\xde\xad\x42\x0c\x8d\x14\x05\x55\x03\x50\xda\x77\x2e\xd2\xa4\xe3\xd5\x8a\x11\xd0\xba\x79\x51\x0e\xdd\x27\x82\x80\x6c\x17\x37\x32\x0a\x7d\x69\x4b\x2a\xe2\x57\xda\x73\x49\x68\x4b\xae\x49\xd1\x14\x79\x38\x31\xed\x87\x10\x75\x5d\x75\x8d\x51\x78\x46\x1e\xe6\x46\x71\xe4\x15\x24\x90\x37\x7b\x41\x18\xdd\xf6\xbc\xa0\x90\x6e\xde\x6e\x58\x4e\x2e\x47\x02\x77\x94\x43\xab\x7b\x8f\x40\xbf\x2f\xa6\xd4\xb1\x77\xb2\x0e\xc9\xf6\xac\x00\x30\x70\x8b\xad\xa2\xe7\x47\x18\x7f\xed\x3a\x81\xf2\xef\xf1\x7a\x28\x8a\xfb\x95\x85\x6e\xcd\x49\xf4\xcc\xda\x25\x7a\x01\xe9\x99\xb6\x4a\x79\x2b\x67\xf7\x0c\x24\xfb\x86\x92\x7d\xbd\xdd\xfd\xbd\xbd\xc9\x4c\xba\x7f\x28\x39\x37\x34\x98\x1a\x1c\xe8\xc9\xe6\xd3\xb9\xd9\x09\xab\x67\xd6\x2c\x66\x7b\x4c\x7b\xa6\x7b\xd2\xca\x5b\xa5\x6c\xfa\x7f\xd9\x43\x2e\x9b\x9f\x9d\xf3\xb6\x64\xca\xca\x15\xad\x92\x9d\x9c\xa2\x21\x89\x2f\x47\x70\x97\xbc\x3b\x97\x1b\x1c\x48\x4e\xd1\x3e\x93\x3c\x45\xcf\xe4\xca\x9a\x6e\x63\x84\x43\xa8\x2d\x4f\x5f\x5d\xad\x68\x46\xb4\x4f\xab\x8f\x24\x35\x23\xd2\x4d\x69\xa4\x5b\x6b\x5d\xaf\x35\x44\x0c\x6d\x8d\xa1\x2d\x37\x34\x23\xb2\x4a\xab\x8f\x18\x5a\x32\xb2\x56\xdb\x18\x31\x34\xcd\x08\x85\xa0\x28\x95\xdd\xdc\xae\x68\x2b\xa2\x6a\xc2\xd0\xd6\x46\x0c\xad\x3e\xa9\x35\x45\xd6\x68\x86\x7a\xc2\x70\x3b\xde\x18\x51\xb7\x24\xb5\x7a\xf5\x9e\xa4\x66\xf4\xb8\x4a\x6b\xa4\xdf\xb3\x90\x0c\x2c\x24\xcb\x16\x12\x11\x75\xa3\xa1\x19\xea\xb1\x72\xf3\xad\xd4\xfc\xc8\x7f\xbf\xf9\x26\x43\x5b\xdf\xa5\x25\x22\x86\x16\x37\xb4\xa6\x48\xef\x6a\xed\x36\x35\x93\xd4\x62\xea\x6a\x43\xab\xdd\xa9\xb5\xaf\xd3\x9a\x57\xcf\x6b\x6d\x3d\x5a\x4b\xc4\xd0\x9a\x23\xdd\x24\x6a\x87\x42\x2a\x94\x5b\x5f\xf3\x6d\x6e\x71\x8d\x54\xef\x96\xe8\x3f\x2a\xd1\xf7\x48\xf4\xc3\x12\xfd\xa8\x44\x37\x25\xfa\x4f\x4a\xf4\x59\x89\xfe\xd3\x12\xfd\xbc\x44\xff\x81\x44\x7f\x4c\xa2\x5f\x92\xe8\x4f\x49\xf4\xe7\x25\xfa\x4b\x12\xfd\x7d\x89\xfe\x89\x44\xff\x7b\x89\xae\x2a\xd5\xf5\xb8\x44\x6f\x91\xe8\xe2\x77\x24\x5f\x5f\x21\xd1\xd7\x4b\xf4\xcd\x12\x7d\x48\xa2\xdf\x21\xd1\x0f\x49\xf4\xe3\x12\x7d\x5c\xa2\x4f\x4b\xf4\xb3\x12\xfd\x67\x24\xfa\x83\x12\xfd\xe7\x25\xfa\x43\x12\xfd\x71\x89\xfe\xa4\x44\xff\x0d\x89\xfe\xac\x44\x7f\x51\xa2\xbf\x2e\xd1\xdf\x95\xe8\x1f\x49\xf4\x8f\x25\xfa\x3f\x49\xf4\xff\x94\xe8\x35\xa1\xea\x7a\xa3\x44\x6f\x95\xe8\xcb\x25\xfa\x2a\x89\xbe\x46\xa2\x77\x49\xf4\x0d\x12\x7d\x50\xa2\x0f\x4b\xf4\x5d\x12\xfd\xab\x12\x7d\x44\xa2\x1f\x92\xe8\x47\x25\xfa\x8f\x4b\x74\x53\xa2\x4f\x49\xf4\x9c\x44\xb7\x25\xfa\x7d\x12\xfd\xbc\x44\x7f\x48\xa2\x3f\x22\xd1\x1f\x95\xe8\x4f\x48\xf4\xcb\x12\xfd\x37\x05\x3d\xe1\xea\x2a\x76\x0b\x7a\x2d\xd3\x2f\x56\x09\x9d\x55\xc9\x07\x74\x15\xaa\x44\xd7\x25\x7a\x54\xa2\xc7\x24\x7a\xbd\x44\x6f\xbb\x49\xbb\xe2\xc6\xa2\x91\x9b\xf4\x2f\x5d\xfd\xe6\xf1\x7f\xcf\xd5\x6f\x1e\x7f\xab\xab\x6b\x37\xe9\xd7\xcb\xdf\xd1\x00\x7a\x85\x3c\x17\xaa\x64\xff\x50\xd8\xeb\x8e\x2e\x70\xb3\xc0\xcb\x05\x1e\x14\x78\xa7\xc0\x23\x02\xdf\x2d\x70\x8e\x63\x2a\x73\x04\xbe\x5f\xe0\xef\x08\x7c\x49\xe0\x5f\x17\xf8\x59\x81\x7f\x4f\xe0\x6b\x02\x5f\x17\xf8\x53\x81\xff\x59\xe0\xb8\x52\xc9\x6d\x02\xf7\x09\x7c\xbb\xc0\x47\x05\xfe\xa6\xc0\xbe\x67\x90\x07\xde\xc3\x7d\x55\x8b\xb2\x3a\x4d\x1c\xd3\xd6\xb6\x71\xfc\x75\x00\xcb\x38\x26\xaf\xb9\x8d\xe3\x63\x00\xb6\x70\x4c\x2f\xc0\xdb\xb9\xf9\x9d\x2c\xff\xf6\xeb\x95\x37\x70\xfb\x19\x65\x9f\xb1\x8e\x71\x4c\x51\xad\xc9\x31\xf9\xd2\x0c\xc7\xb5\x00\xe6\x39\x8e\xb2\xdf\xc3\x7c\xa6\xab\xe9\x17\x38\xa6\xb9\xfe\x0a\xc7\xb4\x16\xbf\xc3\x31\x5d\x65\x2f\x70\x1c\x07\xca\x71\x5d\x94\xbd\xe3\xbd\xc5\xcd\xe7\x38\x80\xbf\xe2\xca\x1b\x69\xcd\x94\x80\x69\x2d\xb7\x72\x4c\xbe\xbf\x8d\xe3\x16\x00\xc3\xdc\xfe\x90\xff\xde\xc5\x95\x1f\xa1\x35\x17\xd8\xe1\x98\xae\xd1\x73\x1c\xb7\x03\x38\xcf\xf1\x36\x00\xbf\xc8\xf1\x57\x00\x3c\xc1\x31\x5d\x6b\x4f\x73\xbc\x9d\xfd\x4e\xe9\xf3\x10\x50\x8e\x27\xa2\xcc\x17\xde\xe3\xb8\x1f\x28\xc7\x0f\x51\xf6\xae\xfb\x77\x1c\x77\x02\xf8\x9c\x63\xf2\x1d\x35\x14\x30\x5d\xfb\x09\x8e\xe9\x9d\x78\x25\xc7\x2b\x01\x6c\xe6\x78\x15\x8d\x91\xe3\xd5\x00\xf6\x72\x6c\x90\x8f\x73\xbc\x06\xc0\x4f\x70\xbc\x16\xc0\x34\xc7\xeb\x00\xcc\x71\xdc\x45\xfe\xc3\xf1\x7a\x00\xdf\xe7\x98\x7c\xfd\x71\x8e\x37\xd0\xfa\x71\xbc\x91\xfc\x87\xe3\x4d\x00\x5e\xe3\x78\x33\xad\x1f\xc7\x74\xad\x5c\xe7\x78\x2b\x80\x7f\xe0\x98\xde\xdd\xfe\x8d\xe3\x24\xfb\x3d\xd8\xe7\x1e\xf2\x21\x8e\x7b\x69\xce\x1c\xf7\x01\x38\xc8\xf1\x00\xf9\x90\x1a\xf8\x1b\xdd\x0f\x4e\x71\xe5\xb7\xd3\xfa\xa8\x95\xfe\x56\x50\x2b\xfd\xeb\x5e\xa1\xfc\x5b\x1c\x0f\x03\x78\x80\xe3\x5d\x00\x1e\xe2\x98\xae\xfd\xc7\x39\xbe\x83\xee\xaf\x1c\xd3\xbd\xe0\x05\x8e\xe9\x5e\xf0\x92\x60\xef\x0d\x81\x3f\x14\xea\xff\x85\x50\xfe\xb7\x02\x7f\x26\xcc\xff\x4b\xae\xfc\x2e\xf2\xc7\x70\xc0\xf4\xec\xe9\xe0\x78\x07\xf9\x08\xc7\xf4\x0e\xfd\x15\x8e\x7f\x84\xfe\x38\x3e\x40\xfe\xc9\x31\xbd\x5b\x8f\x71\xbc\x97\xee\xcf\x1c\x93\xff\x4f\x71\xbc\x8f\xae\x77\x8e\xf7\x93\x7f\x72\xfc\x55\x00\x0f\x72\x7c\x27\x80\x1f\x70\xfc\x35\x00\x8f\x0a\xfc\x6b\x1c\x1f\x04\xf0\x0a\xc7\xa3\x08\x0e\x7f\x7d\x74\x81\x13\x02\x77\x08\xdc\x2b\xf0\x90\xc0\xbb\x05\x3e\x20\xf0\x29\x8e\xe9\x7e\x38\x25\x70\x51\xa8\x3f\x27\x30\xff\x7c\x3b\x5a\x85\x57\x08\xfd\x89\xe3\xfb\x4c\x2c\x17\x9e\x9f\x48\x4e\x58\xe3\xb3\x93\x29\x73\x7c\xbc\x64\x9d\x46\xd2\xb1\xe6\x9c\xca\xef\xa2\x33\x66\xd1\xee\x49\x17\xf2\x79\x2b\xed\x64\x0b\x79\x1b\xc9\x92\x95\x63\xad\x8a\xb3\xe3\xce\x7c\xd1\x12\x35\xf7\x57\x7f\x5e\x2b\x99\xf9\x49\x52\x3c\xb2\x9d\x92\x5b\xc8\xcc\xb0\x8f\xad\xc2\xb7\x57\x56\x77\xc6\x4c\x67\xf3\x99\x02\xdf\x99\xcb\xe5\xef\xb8\x5c\x41\x2e\x9b\x67\x6c\x4d\xa5\x32\x25\x73\xa6\xb2\xb4\x90\x46\xd2\x76\x4a\x8e\x39\x8e\xa4\x3d\x3f\x43\x29\xf7\x11\x77\x74\xcf\x9e\xbe\xd4\x36\x2f\xe9\xc7\xff\xf9\xf8\x47\xff\x27\x3b\xe1\xb8\xd1\xe5\xa5\xed\xc2\xfb\xa5\x80\x6e\x2c\xa1\x70\xfb\xed\x1f\xbe\xbf\x89\x9f\xc6\xc5\xc8\xfc\x3e\x49\x7b\xff\x3b\x8d\xf8\x7d\x56\x6c\x3f\xc7\xe2\x91\x9b\xc6\xcf\x02\x5c\xf6\xef\x61\xee\xf5\xa2\x72\xed\xfd\xeb\x69\x2d\xb3\x2f\xae\xc1\x45\x26\x88\xdf\x6d\xc2\x42\xbd\x17\x24\xed\xaf\x84\xab\xd7\x17\xd7\x6f\x86\x69\xbd\x82\xfe\x22\x6b\xf8\x4c\xa8\x7a\x7b\x3f\xfd\x9b\x2a\x7d\xd2\x51\x60\x9f\x26\xcf\x2c\xb1\x7f\x7f\x29\x59\xbf\x04\xbb\x60\x2f\xb2\x06\x1d\x6c\xed\xc4\xf5\x53\x24\xf6\x3f\x66\x15\x9d\x25\xec\x3f\x2d\x69\x7f\x92\xbd\xaa\xbd\x19\xbe\x75\xfb\xcb\x92\xf1\xff\xd6\x4a\x2f\x35\x22\xc1\xf8\x63\x55\xc6\x9f\x92\xd8\x5f\xcf\x7e\xcd\xbd\x80\x5b\xdb\xff\x31\x89\xfd\x77\xd6\x79\xa9\x1f\xc7\x76\xb0\x38\x57\xb4\xff\x4b\x12\xfb\xcf\x36\x54\xb7\x27\xf2\x41\x49\xfb\xe7\x58\xfb\x6f\x2f\xd1\x7e\xbf\x64\xfc\x17\xba\x2a\xc7\xd9\xc1\xf2\xe2\xf8\xb7\x4b\xec\x0f\xb1\x0a\x6f\x2c\x61\x7f\x9b\xc4\xfe\xc5\x2a\xf6\x9b\xaa\xd8\xff\x80\xf5\x29\xbe\x61\xeb\x8d\x5e\x2a\xfe\x4b\x89\x78\xff\x78\x57\xe6\x3f\xcc\x3e\x7f\xff\x68\xa9\x62\xff\x55\xc9\xfc\x4f\x30\xfb\x31\xc9\xf5\xeb\x1f\x2f\xcb\xfc\xa7\x8a\xfd\xb6\x2a\xf6\x3f\x97\xfc\x7b\xe1\x14\x7b\xe1\xff\xae\x1e\xd8\x3d\xce\xb5\xf7\xe3\x87\xff\x0a\x00\x00\xff\xff\x47\x57\x4c\x09\x48\x2c\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 11336, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

